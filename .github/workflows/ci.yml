---
name: CI

on: # yamllint disable-line rule:truthy
  pull_request:
  push:
    paths:
      - ".github/workflows/**"
      - "app/**"
      - "bin/**"
      - "config/**"
      - "db/**"
      - "lib/**"
      - "public/**"
      - "spec/**"
      - "vendor/**"
      - "**.yml"
      - "Dockerfile"
      - "Gemfile.lock"
      - "yarn.lock"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # JOB to run change detection
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      deployment: ${{ steps.filter.outputs.deployment }}
      js: ${{ steps.filter.outputs.js }}
      ruby: ${{ steps.filter.outputs.ruby }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            js:
              - "*.js"
              - "*.yml"
            ruby:
              - "**.rb"
              - "**.erb"
              - "**.yml"
            deployment:
              - ".github/workflows/ci.yml"
              - "app/**"
              - "bin/docker-entrypoint"
              - "config/**"
              - "db/**"
              - "lib/**"
              - "public/**"
              - "vendor/**"
              - ".node-version"
              - "config.ru"
              - "Dockerfile"
              - "Gemfile.lock"
              - "yarn.lock"

  scan_ruby:
    runs-on: ubuntu-latest
    needs: [changes]
    if: ${{ needs.changes.outputs.ruby == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  scan_js:
    runs-on: ubuntu-latest
    needs: [changes]
    if: ${{ needs.changes.outputs.js == 'true' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    needs: [changes]
    if: ${{ needs.changes.outputs.ruby == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        uses: standardrb/standard-ruby-action@v1

  test:
    runs-on: ubuntu-latest
    needs: [changes]
    if: ${{ needs.changes.outputs.deployment == 'true' }}

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install packages
        run: |
          sudo apt-get update && \
          sudo apt-get install --no-install-recommends -y google-chrome-stable curl libjemalloc2 libvips sqlite3

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Run tests
        env:
          RAILS_ENV: test
          REDIS_URL: redis://localhost:6379/0
        run: bin/rails db:setup spec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/capybara
          if-no-files-found: ignore

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [changes, test]
    if: ${{ needs.changes.outputs.deployment == 'true' }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
          labels: |
            maintainer=Pedro Pombeiro
            org.opencontainers.image.title=GitLab MR Dashboard
            org.opencontainers.image.description=A productivity-focused MR dashboard for GitLab
            org.opencontainers.image.vendor=Pedro Pombeiro

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            "GIT_REPO_COMMIT_SHA=${{ github.sha }}"
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - uses: honeybadger-io/github-notify-deploy-action@v1
        with:
          api_key: ${{ secrets.HONEYBADGER_API_KEY }}
